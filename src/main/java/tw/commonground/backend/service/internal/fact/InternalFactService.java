package tw.commonground.backend.service.internal.fact;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import tw.commonground.backend.service.fact.dto.FactRequest;
import tw.commonground.backend.service.fact.entity.FactEntity;
import tw.commonground.backend.service.fact.entity.FactRepository;
import tw.commonground.backend.service.reference.ReferenceEntity;
import tw.commonground.backend.service.reference.ReferenceService;
import tw.commonground.backend.shared.tracing.Traced;

import java.util.HashSet;
import java.util.Set;

@Traced
@Service
public class InternalFactService {

    public final FactRepository factRepository;

    private final ReferenceService referenceService;

    public InternalFactService(FactRepository factRepository, ReferenceService referenceService) {
        this.factRepository = factRepository;
        this.referenceService = referenceService;
    }

    @Caching(evict = {
            @CacheEvict(value = "fact", key = "'allFacts'"),
            @CacheEvict(value = "fact", key = "'pageFacts'")
    })
    public FactEntity createFact(FactRequest factRequest) {
        FactEntity factEntity = FactEntity.builder()
                .title(factRequest.getTitle())
                .references(new HashSet<>())
                .isAutoGenerated(true)
                .build();

        Set<ReferenceEntity> referenceEntities = referenceService.createReferencesFromUrls(factRequest.getUrls());
        factEntity.setReferences(referenceEntities);

        return factRepository.save(factEntity);
    }

}
